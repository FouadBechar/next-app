#!/usr/bin/env node
import fs from 'fs'
import path from 'path'
import { fileURLToPath } from 'url'
import browserslist from 'browserslist'

function parseMajor(versionStr) {
  // Handle formats like "141", "18.5-18.6", "14.9", "all"
  if (!versionStr) return NaN
  if (versionStr === 'all') return NaN
  // Split ranges like "18.5-18.6" -> take first part
  const first = String(versionStr).split('-')[0]
  const num = parseInt(first.replace(/[^0-9].*$/, ''), 10)
  return Number.isFinite(num) ? num : NaN
}

async function main() {
  try {
    // Resolve browserslist for the current project (reads package.json or .browserslistrc)
    const list = browserslist(undefined, { path: process.cwd() })

    // Build a per-browser minimum-major-version derived from the resolved list.
    const mins = {}
    for (const item of list) {
      // item looks like "chrome 141" or "ios_saf 18.5-18.6" or "op_mini all"
      const parts = item.split(/\s+/)
      const name = parts[0]
      const ver = parts[1]
      const major = parseMajor(ver)
      if (!Number.isFinite(major)) {
        // skip non-numeric entries like "all"
        continue
      }
      if (!(name in mins) || major < mins[name]) mins[name] = major
    }

    const outDir = path.join(process.cwd(), 'lib')
    const outPath = path.join(outDir, 'generated-browsers.ts')

    const header = `// Generated by scripts/generate-browsers.mjs â€” do not edit\n// Generated at: ${new Date().toISOString()}\n`
    const content =
      header +
      `export const GENERATED_BROWSERS = ${JSON.stringify(list, null, 2)} as string[];\n\n` +
      `export const MIN_VERSIONS: Record<string, number> = ${JSON.stringify(mins, null, 2)} as Record<string, number>;\n\n` +
      `export default GENERATED_BROWSERS;\n`

    fs.mkdirSync(outDir, { recursive: true })

    // Avoid writing file if unchanged to reduce noisy diffs / unnecessary rebuilds
    let existing = null
    try {
      existing = fs.readFileSync(outPath, 'utf8')
    } catch (e) {
      /* ignore */
    }

    if (existing === content) {
      console.log('generated-browsers.ts is up to date')
      return
    }

    fs.writeFileSync(outPath, content, 'utf8')
    console.log('Wrote', outPath)
  } catch (err) {
    console.error('Failed to generate browsers list:', err)
    process.exit(1)
  }
}

main()
